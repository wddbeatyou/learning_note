1.IP地址，子网掩码、默认网关，DNS的设置和工作原理
IP地址：


子网掩码：


默认网关：
含义：
	就是一个网络连接到另一个网络的“关口”。网关实质上是一个网络通向其它网络的IP地址。这个IP地址，是具有路由功能的IP地址，
	默认网关也是一个网关，也是具有路由功能的设备的IP地址。注意：在填写默认网关时，主机的IP地址必须和默认网关的IP地址处于同一段。
解释：
	如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，
	网络B的网关再转发给网络B的某个主机。网络B向网络A转发数据包的过程也是如此。
	所以说，只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信。
DNS：
含义：
	DNS地址是一个域名服务器地址，它负责把用户的网站地址解析成IP地址。如果这个服务器出现问题，那么你就可能上不了网了。
解释：
	DNS 全名叫 Domain Name Server，中文俗称“域名服务器”，在说明 DNS Server 之前，可能要先说明什么叫 Domain Name(域名)。
	正如上面所讲，在网上辨别一台电脑的方法是利用 IP地址，但是 IP用数字表示，没有特殊的意义，很不好记，因此，
	我们一般会为网上的电脑取一个有某种含义又容易记忆的名字，这个名字我们就叫它“DomainName"。


2. conda安装流程
wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-aarch64.sh
sudo bash Miniconda3-latest-Linux-aarch64.sh
sudo vim ~/.bashrc
export PATH="/home/orin/anaconda/miniconda3/bin:$PATH"
source ~/.bashrc
source activate
conda deactivate
conda create -n yolo python=3.8
conda activate yolo


3. 什么是eMMC，SSD和HDD
eMMC，全称embedded MultiMediaCard，即嵌入式多媒体卡，作用类似硬盘。
eMMC：主要应用于移动设备、汽车电子、工业控制等领域。特别是在智能手机、平板电脑和其他便携式设备中，eMMC已成为主流的存储解决方案。
固态硬盘（SSD）：大小类似内存条；
机械硬盘（HDD）：体积较大的长方体的硬件。

4.docker常用命令
sed的用法
RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list && apt-get update && apt-get install -y <package>
解释：
-i：这个选项告诉 sed 直接修改文件内容，而不是将结果输出到标准输出（通常是屏幕）。这意味着 /etc/apt/sources.list 文件将被直接修改。
's/archive.ubuntu.com/mirrors.aliyun.com/g'：这是 sed 的脚本部分，指定了要执行的编辑操作。s 代表替换（substitute）操作，/ 是分隔符，archive.ubuntu.com 是要被替换的文本，mirrors.aliyun.com 是替换后的文本，g 表示全局替换（即替换行中所有匹配的实例，而不仅仅是第一个）。
/etc/apt/sources.list：这是要编辑的文件名。

--no-install-recommends的用法
RUN apt-get update && apt-get install -y --no-install-recommends <package>
--no-install-recommends 选项指示 apt-get 不要安装推荐的软件包。推荐的软件包是那些被认为与指定软件包一起使用很好的软件包，但它们不是必需的。这个选项可以减小安装后的镜像大小，因为它避免了安装可能不需要的额外软件包。

增加日志打印
RUN echo "Installing dependencies..." && apt-get update && apt-get install -y git

5. 镜像源
{
  "registry-mirrors": ["https://docker.registry.cyou",
	"https://docker-cf.registry.cyou",
	"https://dockercf.jsdelivr.fyi",
	"https://docker.jsdelivr.fyi",
	"https://dockertest.jsdelivr.fyi",
	"https://mirror.aliyuncs.com",
	"https://dockerproxy.com",
	"https://mirror.baidubce.com",
	"https://docker.m.daocloud.io",
	"https://docker.nju.edu.cn",
	"https://docker.mirrors.sjtug.sjtu.edu.cn",
	"https://docker.mirrors.ustc.edu.cn",
	"https://mirror.iscas.ac.cn",
	"https://docker.rainbond.cc"]
}

6.docker镜像运行和打包全过程
1.配置镜像源
	sudo vim /etc/docker/daemon.json
	添加：
	{
	  "registry-mirrors": ["https://f3c2bqrx.mirror.aliyuncs.com","https://jockerhub.com"]
	}
	#重启docker
	sudo systemctl daemon-reload
	sudo systemctl restart docker
2.检查配置情况：
	docker pull mysql
3.编写Dockerfile
4.生成镜像
	docker build -t 镜像名 .
5.运行镜像和停止容器
方式一：编写yml文件，使用docker compose方式管理
前台运行：docker compose up
后台运行：docker compose up -d --force-recreate
停止容器：docker compose down

方式二：生成容器直接运行
前台运行：docker run -it --name=容器名 镜像名:标签 /bin/bash
后台运行：docker run -di --name=容器名 镜像名:标签 /bin/bash
停止容器：docker stop 容器id
6.打包镜像
	docker save -o xxxx.tar xxx:latest
7.加载镜像
	docker load -i xxx.tar
8.查看日志
docker logs 容器id

可选：
9.进入容器内部
	docker exec -it 容器id /bin/bash
10.删除镜像
	docker rmi 镜像ID
	docker rmi 镜像ID --force
11.拉取镜像
	docker pull 镜像名称
12.推送镜像
	本地推送：
	docker push [镜像名]:[标签]
	远程推送：
	docker login --username=wdd930817 registry.cn-hangzhou.aliyuncs.com
	docker tag 镜像ID registry.cn-hangzhou.aliyuncs.com/wdd_project/wdd_docker:版本号
	docker push registry.cn-hangzhou.aliyuncs.com/wdd_project/wdd_docker:[镜像版本号]
13.查看镜像
	docker images
14.查看容器
查看运行容器：	
	docker ps
查看所有容器：	
	docker ps -a
15.容器生成镜像
	docker run --name 容器名 镜像名 /bin/bash
16.镜像生成容器
	docker run -it --name=容器名 镜像名:标签 /bin/bash
17.启动容器
	docker start 容器名称（或者容器ID）












