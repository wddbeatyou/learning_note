一.IP地址，子网掩码、默认网关，DNS的设置和工作原理
IP地址：


子网掩码：


默认网关：
含义：
	就是一个网络连接到另一个网络的“关口”。网关实质上是一个网络通向其它网络的IP地址。这个IP地址，是具有路由功能的IP地址，
	默认网关也是一个网关，也是具有路由功能的设备的IP地址。注意：在填写默认网关时，主机的IP地址必须和默认网关的IP地址处于同一段。
解释：
	如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，
	网络B的网关再转发给网络B的某个主机。网络B向网络A转发数据包的过程也是如此。
	所以说，只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信。
DNS：
含义：
	DNS地址是一个域名服务器地址，它负责把用户的网站地址解析成IP地址。如果这个服务器出现问题，那么你就可能上不了网了。
解释：
	DNS 全名叫 Domain Name Server，中文俗称“域名服务器”，在说明 DNS Server 之前，可能要先说明什么叫 Domain Name(域名)。
	正如上面所讲，在网上辨别一台电脑的方法是利用 IP地址，但是 IP用数字表示，没有特殊的意义，很不好记，因此，
	我们一般会为网上的电脑取一个有某种含义又容易记忆的名字，这个名字我们就叫它“DomainName"。


二. conda安装流程
wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-aarch64.sh
sudo bash Miniconda3-latest-Linux-aarch64.sh
sudo vim ~/.bashrc
export PATH="/home/orin/anaconda/miniconda3/bin:$PATH"
source ~/.bashrc
source activate
conda deactivate
conda create -n yolo python=3.8
conda activate yolo
conda config --add envs_dirs /home/orin/anaconda/miniconda3/envs


三. 什么是eMMC，SSD和HDD
eMMC，全称embedded MultiMediaCard，即嵌入式多媒体卡，作用类似硬盘。
eMMC：主要应用于移动设备、汽车电子、工业控制等领域。特别是在智能手机、平板电脑和其他便携式设备中，eMMC已成为主流的存储解决方案。
固态硬盘（SSD）：大小类似内存条；
机械硬盘（HDD）：体积较大的长方体的硬件。

四.docker常用命令
sed的用法
RUN sed -i 's/archive.ubuntu.com/mirrors.aliyun.com/g' /etc/apt/sources.list && apt-get update && apt-get install -y <package>
解释：
-i：这个选项告诉 sed 直接修改文件内容，而不是将结果输出到标准输出（通常是屏幕）。这意味着 /etc/apt/sources.list 文件将被直接修改。
's/archive.ubuntu.com/mirrors.aliyun.com/g'：这是 sed 的脚本部分，指定了要执行的编辑操作。s 代表替换（substitute）操作，/ 是分隔符，
archive.ubuntu.com 是要被替换的文本，mirrors.aliyun.com 是替换后的文本，g 表示全局替换（即替换行中所有匹配的实例，而不仅仅是第一个）。
/etc/apt/sources.list：这是要编辑的文件名。

--no-install-recommends的用法
RUN apt-get update && apt-get install -y --no-install-recommends <package>
--no-install-recommends 选项指示 apt-get 不要安装推荐的软件包。推荐的软件包是那些被认为与指定软件包一起使用很好的软件包，
但它们不是必需的。这个选项可以减小安装后的镜像大小，因为它避免了安装可能不需要的额外软件包。


六.docker镜像运行和打包全过程
1.配置镜像源
	sudo vim /etc/docker/daemon.json
	添加：
	{
	  "registry-mirrors": ["https://f3c2bqrx.mirror.aliyuncs.com","https://jockerhub.com"]
	}
	{
	  "registry-mirrors": ["https://docker.registry.cyou",
							"https://docker-cf.registry.cyou",
							"https://dockercf.jsdelivr.fyi",
							"https://docker.jsdelivr.fyi",
							"https://dockertest.jsdelivr.fyi",
							"https://mirror.aliyuncs.com",
							"https://dockerproxy.com",
							"https://mirror.baidubce.com",
							"https://docker.m.daocloud.io",
							"https://docker.nju.edu.cn",
							"https://docker.mirrors.sjtug.sjtu.edu.cn",
							"https://docker.mirrors.ustc.edu.cn",
							"https://mirror.iscas.ac.cn",
							"https://docker.rainbond.cc"]
}
	#重启docker
	sudo systemctl daemon-reload
	sudo systemctl restart docker
2.检查配置情况：
	docker pull mysql
3.编写Dockerfile
4.生成镜像
	docker build -t 镜像名 .
5.运行镜像和停止容器
方式一：编写yml文件，使用docker compose方式管理
前台运行：docker compose up
后台运行：docker compose up -d --force-recreate
停止容器：docker compose down

方式二：生成容器直接运行
前台运行：docker run -it --name=容器名 镜像名:标签 /bin/bash
后台运行：docker run -di --name=容器名 镜像名:标签 /bin/bash
停止容器：docker stop 容器id
6.打包镜像
	docker save -o xxxx.tar xxx:latest
7.加载镜像
	docker load -i xxx.tar
8.查看日志
	docker logs 容器id

可选：
9.进入容器内部
	docker exec -it 容器id /bin/bash
10.删除镜像
	docker rmi 镜像ID
	docker rmi 镜像ID --force
11.拉取镜像
	docker pull 镜像名称
12.推送镜像
	本地推送：
	docker push [镜像名]:[标签]
	远程推送：
	docker login --username=wdd930817 registry.cn-hangzhou.aliyuncs.com
	docker tag 镜像ID registry.cn-hangzhou.aliyuncs.com/wdd_project/wdd_docker:版本号
	docker push registry.cn-hangzhou.aliyuncs.com/wdd_project/wdd_docker:[镜像版本号]
13.查看镜像
	docker images
14.查看容器
查看运行容器：	
	docker ps
查看所有容器：	
	docker ps -a
15.容器生成镜像
	docker run --name 容器名 镜像名 /bin/bash
	docker commit 容器名 镜像名
16.镜像生成容器
	docker run -it --name=容器名 镜像名:标签 /bin/bash
17.启动容器
	docker start 容器名称（或者容器ID）
18.将容器内的文件复制到本机上
	docker cp <container_id>:<container_path> <host_path>
19.这个命令会清理掉所有未被使用的数据，包括未被打标签的镜像、停止的容器、未使用的网络和悬挂的卷。这通常是释放Docker占用空间的最有效方法。
	docker system prune -a

20.设置开机自启
第一步：先启动容器：
docker run -d --name mediamtx -e MTX_RTSPTRANSPORTS=tcp -p 8554:8554 bluenviron/mediamtx
docker run -d --name mediamtx \
  -e MTX_RTSPTRANSPORTS=tcp \
  -e MTX_WEBRTCADDITIONALHOSTS=172.20.31.102 \
  -p 8554:8554 \
  -p 1935:1935 \
  -p 8888:8888 \
  -p 8889:8889 \
  -p 8890:8890/udp \
  -p 8189:8189/udp \
  bluenviron/mediamtx
第二步：设置开机自启：docker update --restart=always mediamtx

21.取消开机自启
docker update --restart=no mediamtx

22. 彻底禁用 Docker 服务自启（谨慎操作）
sudo systemctl disable docker

23.恢复 Docker 服务自启
sudo systemctl enable docker


七.Jetson Orin Nano安装torch调用gpu
第一步：进入官网：https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048
第二步：查看jetpack版本：sudo apt-cache show nvidia-jetpack，如：Version: 5.1.2-b104
第三步：下载jetpack版本对应的torch版本： torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl
第四步：安装torch：pip install torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl
第五步：安装相关依赖：
						sudo apt --fix-broken install
						sudo apt update
						sudo apt install libopenblas-dev
第六步：查看结果：
						import torch
						print(torch.__version__)
						print(torch.cuda.is_available())

八.FFmpeg+Mediamtx+VLC 简单实现视频流的推流拉流效果
FFmpeg
定义：FFmpeg是一款强大的多媒体处理工具，它负责将视频文件进行编码并推送到流媒体服务器上。
FFmpeg主要执行以下任务：
	读取视频文件：FFmpeg可以从本地文件系统或网络位置读取视频文件。
	编码转换：根据需要将视频文件转换为流媒体服务器可以接受的格式和编码。
	推流：将编码后的视频流推送到指定的流媒体服务器地址和端口。

Mediamtx
定义：Mediamtx在这里作为流媒体服务器，它负责接收FFmpeg推送的视频流，并将其提供给VLC或其他客户端进行拉流播放。
流媒体服务器的主要功能包括：
	接收推流：从FFmpeg等推流工具接收视频流。
	流媒体处理：对流媒体数据进行处理，如转发、录制、广播等。
	提供拉流服务：将处理后的视频流提供给VLC或其他支持RTSP、RTMP等协议的客户端进行播放。

VLC
定义：VLC（VideoLAN Client）是一款开源的多媒体播放器，它支持多种音频和视频格式以及流媒体协议。在这里，VLC作为拉流工具，负责从流媒体服务器接收视频流并在本地进行播放。
VLC的主要功能包括：
	拉流：从流媒体服务器接收RTSP、RTMP等协议的视频流。
	播放：在本地播放接收到的视频流。
	调整播放设置：如调整音量、亮度、对比度等播放参数。

命令：ffmpeg -re -i E:\vlc\test.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://172.20.31.57:8554/stream1
解释：
	ffmpeg: 调用ffmpeg程序。
	-re: 以本地帧率读取输入文件。这对于模拟实时流媒体传输非常有用，确保发送的数据流的速度与原始视频的速度相匹配。
	-i C:\Users\suolide-zjq\Desktop\mp4\1.mp4: 指定输入文件，这里是位于C:\Users\suolide-zjq\Desktop\mp4\目录下的1.mp4文件。
	-c copy: 表示在编码过程中不对视频和音频流进行重新编码，直接复制。这可以大大节省处理时间和保持原始质量，但前提是原始编码格式与目标流媒体服务器或客户端兼容。
	-rtsp_transport tcp: 指定RTSP传输层使用TCP协议。RTSP（Real Time Streaming Protocol）是一种网络控制协议，用于控制流媒体数据的传输。TCP（Transmission Control Protocol）是一种可靠的、面向连接的协议，尽管可能引入一些延迟，但能够确保数据的完整性和顺序。
	-f rtsp: 指定输出文件的格式是RTSP。这告诉ffmpeg输出应该被格式化为RTSP流，以便可以通过网络进行流媒体传输。
	rtsp://192.168.2.23:8554/stream: 指定RTSP流的URL。这里，rtsp://是协议部分，192.168.2.23是RTSP服务器的IP地址，8554是服务器监听的端口号，/stream是流的路径或名称。这个URL是ffmpeg将视频流发送到的目的地。
	
九、ZLMediaKit服务
切换：/home/orin/ZLMediaKit/release/linux/Debug
运行：./MediaServer 

十、C++模型转换
命令：/usr/src/tensorrt/bin/trtexec --onnx=best.onnx --saveEngine=best.engine



	